#!/bin/bash

#Author : Dulya Murage - 24910402

#check input file validation
if [ -z "$1" ]; then
	echo "Please use $0 <fileName.tsv>"
	exit 1
fi

input_file="$1"

awk -F'\t' '
	BEGIN {
		OFS = "\t"
	}

	NR == 1 {
                #find column indexes of Domains and Mechanics
		for ( i = 1; i <= NF; i++ ) {
			field = $i
			gsub(/^[ \t]+|[ \t]+$/, "", field)
			field = tolower(field)

			if ( field == "domains" ) domains_col=i
			if ( field == "mechanics" ) mechanics_col=i
			if ( field == "year published" ) year_col=i
			if ( field == "rating average" ) rating_col=i
			if ( field == "complexity average" ) complexity_col=i
		}

		#handle error in case the required columns are nor present in the dataset
		if ( !domains_col ) {
			print "Error : Missing Domains column in the dataset"
			exit 1
		}
		if ( !mechanics_col ) {
			print "Error : Missing Mechanics column in the dataset"
			exit 1
		}
		if ( !year_col ) {
			print "Error : Missing Year Published column in the dataset"
			exit 1
		}
		if ( !rating_col ) {
			print "Error : Missing Average rating column in the dataset"
			exit 1
		}
		if ( !complexity_col ) {
			print "Error : Missing Complexity Average column in the dataset"
			exit 1
		}

		next

	}

	NR > 1 {
		#for each row after header, proces the data

		#split the 'Domains' column by (,) in to individual domains
		n = split($(domains_col),domains,",")

		for ( i = 1; i <= n; i++ ) {
			#check if the domain is not an empty string
			if ( domains[i] != "") {
				#trim leading/trailing spaces
				gsub(/^[ \t]+|[ \t]+$/, "", domains[i])  # Trim spaces
				#increment the count for each domain encountered
				domains_count[domains[i]]++
			}

		}

		#split the 'Mechanics' column by (,) in to individual mechanics
		m = split($(mechanics_col),mechanics,",")

		for ( i = 1; i <= m; i++ ) {
			#check if the mechanic is not an empty string
			if ( mechanics[i] != "" ) {
				#trim leading/trailing spaces
				gsub(/^[ \t]+|[ \t]+$/, "", mechanics[i])
				#increment the count for each mechanic encountered
				mechanics_count[mechanics[i]]++
			}
		}

		#calculate inputs for pearson correlation formula
		original_year = $(year_col)
		original_rating = $(rating_col)
		original_complexity = $(complexity_col)

		#clean data
		gsub(/^[ \t]+|[ \t]+$/, "", original_year)
        	gsub(/^[ \t]+|[ \t]+$/, "", original_rating)
        	gsub(/^[ \t]+|[ \t]+$/, "", original_complexity)
                
		#year vs rating correlation
		#lets consider x as variable year and y as variable rating
		if ( original_year != "" && original_rating != "" ) {
			year = original_year + 0
			rating = original_rating + 0
			num++
			sum_x += year
			sum_y += rating
			sum_x_squared += year * year
			sum_y_squared += rating * rating
			sum_xy += year * rating
		}

		#complexity vs rating correlation
		#lets consider c as variable complexity and r as variable rating
		if ( original_complexity != "" && original_rating != "" ) {
			complexity = original_complexity + 0
			rating = original_rating + 0

			num_points++
			sum_c += complexity
			sum_r += rating
			sum_c_squared += complexity * complexity
			sum_r_squared += rating * rating
			sum_cr += complexity * rating
		}
	}

	END {
		#find most popular domain
		max_domain=""
		max_domain_count=0
		for ( d in domains_count ) {
			if ( domains_count[d] > max_domain_count ) {
				max_domain=d
				max_domain_count=domains_count[d]
			}
		}
		#find most popular mechanic
		max_mechanic=""
		max_mechanic_count=0
		for ( m in mechanics_count) {
			if ( mechanics_count[m] > max_mechanic_count) {
				max_mechanic =m
				max_mechanic_count=mechanics_count[m]
			}
		}
		printf("The most popular game mechanics is %s found in %d games\n", max_mechanic, max_mechanic_count)
		printf("The most game domian is %s found in %d games\n", max_domain, max_domain_count)

		#execute pearson correlation formula for  year published vs rating
		numerator = ( num * sum_xy ) - ( sum_x * sum_y )
		denominator = sqrt((num * sum_x_squared - sum_x^2) * (num * sum_y_squared - sum_y^2))

		#check if denominator is zero to avoid zero devision error
		if (denominator == 0) {
			print "Can not perform pearson correlation due to denominator being zero"
		} else {
			correlation = numerator/denominator
			printf("The correlation between the year of publication and the average rating is %.3f\n", correlation)
		}

		#execute pearson correlation formula for complexity vs rating
		numerator = ( num_points * sum_cr ) - ( sum_c * sum_r )
		denominator = sqrt((num_points * sum_c_squared - sum_c^2) * (num_points * sum_r_squared - sum_r^2))

		if (denominator == 0) {
			print "Can not perform pearson corrleation due to denominator being zero"
		} else {
			correlation = numerator/denominator
			printf("The correlation between the complexity of a game and its average rating is %.3f\n", correlation)
		}
	}
' "$input_file"
